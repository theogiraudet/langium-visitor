/******************************************************************************
 * This file was generated by langium-visitor.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

import * as ASTInterfaces from '{{ resolvedImportAst }}';
import { LangiumCoreServices, {% if hasAnyReference %}Reference, {% endif %}ValidationAcceptor, ValidationChecks } from 'langium';

/**
 * This interface is used to define the visitor methods for the {{ projectName }} language.
 */
export interface {{ projectName}}Visitor {
    {%- for interface in interfaces %}
    visit{{ interface.name }}(node : {{ interface.name }}) : any;
    {%- endfor %}
}

/**
 * This abstract class is used to implement a validation visitor for the {{ projectName }} language.
 * It uses the Langium validator service under the hood and exposes its `accept` method through the `validationAccept` property.
 * This `validationAccept` property is reassigned each time the `visitRoot` method is called, so when Langium called the different validation checks.
 */
export abstract class {{ projectName }}ValidationVisitor {

    protected validationAccept: ValidationAcceptor = () => {};

    visitRoot(node: {{ rootType }}, accept: ValidationAcceptor) {
        this.validationAccept = accept;
        node.accept(this);
    }
    {% for interface in interfaces %}
    abstract visit{{ interface.name }}(node : {{ interface.name }}) : any;
    {%- endfor %}
}


/**
 * This function is used to register a validation visitor for the {{ projectName }} language.
 * It will register the `visitRoot` method as a validation check for the {{ rootType }} type.
 * @param visitor - The visitor to register.
 * @param services - The Langium services.
 */
export function registerVisitorAsValidator<T extends {{ projectName }}ValidationVisitor>(visitor: T, services: LangiumCoreServices) {
    const registry = services.validation.ValidationRegistry;
    const checks: ValidationChecks<ASTInterfaces.{{ projectName }}AstType> = {
        {{ rootType }}: (node, accept) => {
            visitor.visitRoot(node as {{ rootType }}, accept);
        }
    };
    registry.register(checks, visitor);
}


/* Each concrete interfaces in the `ast.js` file have an equivalent generated type with the same properties but also with an `accept` method.
 * While the generated accept-weaver allows us to dynamically add the `accept` function to Langium's types, these types allow it to exist statically, so we can take advantage of TypeScript's typing.
 * The references are overrided to use the visitor types instead of the Langium interfaces/types.
 * Nevertheless, the two are strictly equivalent, and conversion from one to the other is made possible thanks to duck-typing.
 */

type Acceptor = {
    accept: (visitor: {{ projectName }}Visitor) => any;
}

function isAcceptor(node: unknown): node is Acceptor {
    return typeof (node as any).accept === 'function';
}
{% for interface in interfaces %}
export type {{ interface.name }} = Acceptor & {% if interface.references.length > 0 %}Omit<ASTInterfaces.{{ interface.name }}, {% for reference in interface.references %}'{{ reference.name }}'{% if not loop.last %} | {% endif %}{% endfor %}>{% else %}ASTInterfaces.{{ interface.name }}{% endif %}{% if interface.references.length > 0 %} & {
{%- for reference in interface.references %}
    {{ reference.name }}: {{ reference.type }};
{%- endfor %}
}
{%- endif %}

export function is{{ interface.name }}(node: unknown): node is {{ interface.name }} {
    return ASTInterfaces.is{{ interface.name }}(node) && isAcceptor(node);
}
{% endfor %}

{%- if unions.length > 0 %}
/*
 * Each union type in the `ast.js` file have an equivalent generated type but using the visitor classes instead of the Langium interfaces/types.
 * This type is used to propose the `accept` method of their generated classes.
 */
{% for union in unions %}
export type {{ union.name }} = {{ union.types }};
{% endfor %}
{%- endif %}