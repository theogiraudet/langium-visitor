/******************************************************************************
 * This file was generated by langium-visitor.
 * DO NOT EDIT MANUALLY!
 ******************************************************************************/

import * as ASTInterfaces from '../language/generated/ast.js';
import { LangiumCoreServices, Reference, ValidationAcceptor, ValidationChecks } from 'langium';

/**
 * This interface is used to define the visitor methods for the HelloWorld language.
 */
export interface HelloWorldVisitor {
    visitGreeting(node : Greeting) : any;
    visitModel(node : Model) : any;
    visitPerson(node : Person) : any;
}

/**
 * This abstract class is used to implement a validation visitor for the HelloWorld language.
 * It uses the Langium validator service under the hood and exposes its `accept` method through the `validationAccept` property.
 * This `validationAccept` property is reassigned each time the `visitRoot` method is called, so when Langium called the different validation checks.
 */
export abstract class HelloWorldValidationVisitor {

    protected validationAccept: ValidationAcceptor = () => {};

    visitRoot(node: Model, accept: ValidationAcceptor) {
        this.validationAccept = accept;
        node.accept(this);
    }
    
    abstract visitGreeting(node : Greeting) : any;
    abstract visitModel(node : Model) : any;
    abstract visitPerson(node : Person) : any;
}


/**
 * This function is used to register a validation visitor for the HelloWorld language.
 * It will register the `visitRoot` method as a validation check for the Model type.
 * @param visitor - The visitor to register.
 * @param services - The Langium services.
 */
export function registerVisitorAsValidator<T extends HelloWorldValidationVisitor>(visitor: T, services: LangiumCoreServices) {
    const registry = services.validation.ValidationRegistry;
    const checks: ValidationChecks<ASTInterfaces.HelloWorldAstType> = {
        Model: (node, accept) => {
            visitor.visitRoot(node as Model, accept);
        }
    };
    registry.register(checks, visitor);
}


/* Each concrete interfaces in the `ast.js` file have an equivalent generated type with the same properties but also with an `accept` method.
 * While the generated accept-weaver allows us to dynamically add the `accept` function to Langium's types, these types allow it to exist statically, so we can take advantage of TypeScript's typing.
 * The references are overrided to use the visitor types instead of the Langium interfaces/types.
 * Nevertheless, the two are strictly equivalent, and conversion from one to the other is made possible thanks to duck-typing.
 */

type Acceptor = {
    accept: (visitor: HelloWorldVisitor) => any;
}

function isAcceptor(node: unknown): node is Acceptor {
    return typeof (node as any).accept === 'function';
}


export type Greeting = Acceptor & Omit<ASTInterfaces.Greeting, '$container' | 'person'> & {
    $container: Model;
    person: Reference<Person>;
}

export function isGreeting(node: unknown): node is Greeting {
    return ASTInterfaces.isGreeting(node) && isAcceptor(node);
}


export type Model = Acceptor & Omit<ASTInterfaces.Model, 'persons' | 'greetings'> & {
    persons: Array<Person>;
    greetings: Array<Greeting>;
}

export function isModel(node: unknown): node is Model {
    return ASTInterfaces.isModel(node) && isAcceptor(node);
}


export type Person = Acceptor & Omit<ASTInterfaces.Person, '$container'> & {
    $container: Model;
}

export function isPerson(node: unknown): node is Person {
    return ASTInterfaces.isPerson(node) && isAcceptor(node);
}

